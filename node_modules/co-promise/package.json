{
  "name": "co-promise",
  "version": "1.0.0",
  "description": "co-promise",
  "main": "index.js",
  "scripts": {
    "test": "mocha --harmony --ui tdd test.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/lightsofapollo/co-promise.git"
  },
  "keywords": [
    "co",
    "promise"
  ],
  "author": {
    "name": "James Lal [:lightsofapollo]"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/lightsofapollo/co-promise/issues"
  },
  "homepage": "https://github.com/lightsofapollo/co-promise",
  "peerDependencies": {
    "co": "^3.0.6",
    "promise": "^5.0.0"
  },
  "devDependencies": {
    "mocha": "^1.18.2"
  },
  "readme": "# co-promise\n\nThis does what you would expect and brings co a lot closer to what the\nasync function proposal for es7 does.\n\n```js\nvar co = require('co-promise');\n\nco(function* (err, value) {\n}).\nthen(function() {\n}).\ncatch(function() {\n});\n\n```\n\n## Important Notes\n\nNormal co is likely faster so using co-promise only where you need to\nreturn a promise instead of a thunk (like to another api which expects a\npromise). This is generally okay since co-promise is only needed for the\nvery top level generator the rest of the \"yieldables\" will use normal co\nfunctionality and not be wrapped with an extra layer of promises.\n",
  "readmeFilename": "README.md",
  "_id": "co-promise@1.0.0",
  "dist": {
    "shasum": "cd644fb6f2c8db23b55f82d06813eac4a32b9690"
  },
  "_from": "co-promise@",
  "_resolved": "https://registry.npmjs.org/co-promise/-/co-promise-1.0.0.tgz"
}
